#!/usr/bin/env python3

"""
colorscale - Generate shades, tints, and tones of a given color.

This script takes a hex color code as input and generates a color scale
consisting of shades, tints, and tones. Shades are created by decreasing the
brightness of the color, while tints are created by increasing the brightness.
Tones are created by blending the color with a gray tone, with the farthest
tone being #808080.

The solution is based on linear interpolation between the original color and
black (for shades), white (for tints), and gray (for tones). For more
information on color theory, you can refer to the following resources:
- https://en.wikipedia.org/wiki/Shades_of_color
- https://en.wikipedia.org/wiki/Tints_and_shades

Usage:
    colorscale <hex_color> [number_of_colors]

Example:
    colorscale a2c4c9 11

Generated by OpenAI's ChatGPT language model, with further modifications by
Obedi Ferreira.

License:
    MIT License

Copyright (c) 2023 Obedi Ferreira

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
"""

import sys

def clamp(val, lower, upper):
    """
    Clamps a value between the given lower and upper bounds.

    :param val: The value to be clamped.
    :param lower: The lower bound.
    :param upper: The upper bound.
    :return: The clamped value.
    """
    return max(lower, min(upper, val))

def adjust_color(color, factor, mode):
    """
    Adjusts a color based on the given factor and mode.

    :param color: The color to be adjusted.
    :param factor: The adjustment factor.
    :param mode: The mode to adjust the color ("lighter", "darker", or "tone").
    :return: The adjusted color.
    """
    r, g, b = tuple(int(color[i:i+2], 16) for i in (0, 2, 4))

    if mode == "lighter":
        r = clamp(r + int((255 - r) * factor), 0, 255)
        g = clamp(g + int((255 - g) * factor), 0, 255)
        b = clamp(b + int((255 - b) * factor), 0, 255)
    elif mode == "darker":
        r = clamp(int(r * factor), 0, 255)
        g = clamp(int(g * factor), 0, 255)
        b = clamp(int(b * factor), 0, 255)
    elif mode == "tone":
        gray = int(128 * factor)
        r = clamp(r + gray - int(r * factor), 0, 255)
        g = clamp(g + gray - int(g * factor), 0, 255)
        b = clamp(b + gray - int(b * factor), 0, 255)

    return f"{r:02x}{g:02x}{b:02x}"

def color_scale(hex_color, n_colors=11):
    """
    Generates a color scale with shades, tints, and tones of the given color.

    :param hex_color: The base color.
    :param n_colors: The number of colors in the scale (default: 11).
    :return: A tuple with lists of shades, tints, and tones.
    """
    hex_color = hex_color.lstrip("#")
    shades = []
    tints = []
    tones = []
    factor_step = 1 / (n_colors - 1)

    for i in range(n_colors):
        factor = 1 - i * factor_step
        shades.append(adjust_color(hex_color, factor, "darker"))
        tints.append(adjust_color(hex_color, 1 - factor, "lighter"))
        tones.append(adjust_color(hex_color, 1 - factor, "tone"))

    return shades, tints, tones

def print_scale(name, colors):
    """
    Prints a color scale with the given name and colors.

    :param name: The name of the scale.
    :param colors: A list of colors in the scale.
    """
    print(f"{name}")

    for color in colors:
        print(f"\033[48;2;{int(color[:2], 16)};{int(color[2:4], 16)};{int(color[4:], 16)}m\033[38;2;{int(color[:2], 16)};{int(color[2:4], 16)};{int(color[4:], 16)}m{color}\033[0m", end=" ")
    print()

    for color in colors:
        print(f"\033[38;2;{int(color[:2], 16)};{int(color[2:4], 16)};{int(color[4:], 16)}m{color}\033[0m", end=" ")
    print()

    print()

if __name__ == "__main__":
    if len(sys.argv) < 2:
        print("Usage: colorscale <hex_color> [number_of_colors]")
        sys.exit(1)

    hex_color = sys.argv[1]
    n_colors = int(sys.argv[2]) if len(sys.argv) > 2 else 11
    shades, tints, tones = color_scale(hex_color, n_colors)

    print_scale("Shades", shades)
    print_scale("Tints", tints)
    print_scale("Tones", tones)
