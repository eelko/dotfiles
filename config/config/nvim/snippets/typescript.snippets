# A valid snippet should starts with:
#
#		snippet trigger_word [ "description" [ options ] ]
#
# and end with:
#
#		endsnippet
#
# Snippet options:
#
#		b - Beginning of line.
#		i - In-word expansion.
#		w - Word boundary.
#		r - Regular expression
#		e - Custom context snippet
#		A - Snippet will be triggered automatically, when condition matches.
#
# Basic example:
#
#		snippet emitter "emitter properties" b
#		private readonly ${1} = new Emitter<$2>()
#		public readonly ${1/^_(.*)/$1/}: Event<$2> = this.$1.event
#		endsnippet
#
# Online reference: https://github.com/SirVer/ultisnips/blob/master/doc/UltiSnips.txt

snippet afb "Arrow Function with Body"
	(${1}) => {
		${2}
	}

snippet afe "Arrow Function Expression"
	(${1}) => ${2}

snippet c "Constant"
	const ${1:name} = ${2:value};

snippet l "Variable"
	let ${1:name} = ${2:value};

snippet cd "console.dir()"
	console.dir(${1:obj})

snippet cl "console.log()"
	console.log(${1:obj})

snippet clv "console.log('==> foo', bar)"
	console.log('==> ${1:marker}', ${2:${1}})

snippet i "If Statement"
	if (${1:condition}) {
		${2}
	}${3}

snippet elif "Else-If Statement"
	else if (${1:condition}) {
		${2}
	}${3}

snippet el "Else Statement"
	else {
		${1}
	}${1}

snippet it "Test Case"
	it('${1:does something}', ${2:async }() => {
		${3}
	})

snippet m "Class Method"
	${1:method_name}(${2}) {
		${3}
	}

snippet n "New Instance"
	new ${1:ClassName}(${2})${3}

snippet pm "Private Class Method"
	private ${1:method_name}(${2}) {
		${3}
	}

snippet switch
	switch (${1:condition}) {
		case ${2:when}:
			${3}
			break
		${4}
	}

snippet case
	case ${1:when}:
		${2}
		break
	${3}

snippet th "Throw Error"
	throw new Error('${1:Something went wrong}')

snippet test "Test Case"
	test('${1}', ${2:async }() => {
		${3}
	})

snippet bef "beforeEach"
	beforeEach(${1:async }() => {
		${3}
	})

snippet aft "afterEach"
	afterEach(${1:async }() => {
		${3}
	})

snippet ex "expect"
	expect(${1:expected}).${2}
